竞争可能存在的情况：
1)	对全局变量的存取
2)	传递指针给内核其它部分时，实际上是创造了一个潜在的新的共享情形

资源共享的硬规则: 
	任何时候一个硬件或软件资源超过一个单个执行线程共享时,
并且可能存在一个线程看到那个资源的不一致时, 你必须明确地管理对那个资源的存取.

内核对资源可知性:
	我们必须简短考虑一下另一个重要规则. 当内核代码创建一个会被内核其他
部分共享的对象时, 这个对象必须一直存在(并且功能正常)到它知道没有对它的外部引用
存在为止

驱动的可知性：
	scull 使它的设备可用的瞬间, 它必须准备好处理对那些设备的请求. 并且
scull 必须一直能够处理对它的设备的请求直到它知道没有对这些设备的引用(例如打开
的用户空间文件)存在.


另一个资源共享的重要规则：
1)		
存取管理：
	存取管理的常用技术是加锁或者互斥 --确保在任何时间只有一个执行线程可以操作一个共享资源

